#!/bin/sh

while getopts j: a
do
    case $a in
	j) make_j="$OPTARG";;
	\?) exit 1;;
    esac
done

# fail if we are not in a Linux source directory
if [ "${PWD%%-*}" != "/usr/src/linux" ]
then
    echo "Not in a linux src directory: ${PWD}!\n" >&2
    exit 1
fi

# construct the kernel version string
cur_ver="$(make kernelversion)"

# the path to which the kernel will be installed
kern_path="/boot/kernel-$cur_ver"

# if there is already a kernel with the same version, append a count to the file
# name to make it unique
kern_count=$(ls -1 "$kern_path"* 2>/dev/null| wc -l)
if [ $kern_count -gt 0 ]; then
    kern_path="$kern_path-c$kern_count"
fi

echo "Making linux-$cur_ver"

# compile the kernel and its modules
make -j$make_j && make -j$make_j modules_install

# the kernel build system returns 2 when compilation fails
if [ $? = 2 ]
then
    echo "Error compiling the kernel." >&2
    exit $?
fi

# If /boot was already mounted, we do not need to mount it, but we also do not
# want to unmount it later, either.
grep -q /boot /etc/fstab && grep -q /boot /proc/mounts && should_mount="n" || should_mount="y"

# mount /boot if necessary
if [ $should_mount = "y" ]
then
    mount /boot || exit $?
fi

# 1.) install the kernel and the System.map file to /boot
# 2.) copy the kernel configuration file to /etc/kernels/ (like genkernel does)
# 3.) configure the boot loader
kern_image="$(make image_name)"
cp "$kern_image" "$kern_path" &&
    cp System.map /boot/System.map-$cur_ver &&
    cp .config /etc/kernels/kernel-config-$cur_ver &&
    grub2-mkconfig -o /boot/grub/grub.cfg

if [ $? -ne 0 ]
then
    echo "Error installing." >&2
    exit $?
fi

# unmount /boot if necessary
if [ $should_mount = "y" ]
then
    umount /boot || exit $?
fi
